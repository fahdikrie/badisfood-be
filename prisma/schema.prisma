// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER  // Can add menus to cart & create order
  ADMIN     // Can add/delete menus and handle orders
}

enum OrderStatus {
  CONFIRMED
  BEING_PREPARED
  CANCELLED
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  password     String
  role         Role      @default(CUSTOMER)

  refreshToken String?

  cart         Cart?

  orders       Order[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Menu {
  id          String   @id @default(uuid())
  name        String
  image       String?
  price       Float

  cartItems   CartItem[]

  orderItems  OrderItem[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CartItem {
  id          String   @id @default(uuid())
  quantity    Int
  totalPrice  Float

  menu        Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  menuId      String

  cart        Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId      String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([menuId, cartId])
}

model Cart {
  id        String   @id @default(uuid())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique

  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id          String    @id @default(uuid())
  quantity    Int
  totalPrice  Float

  menu        Menu      @relation(fields: [menuId], references: [id], onDelete: Cascade)
  menuId      String

  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([menuId, orderId])
}

model Order {
  id              String    @id @default(uuid())
  totalPurchase   Float
  status          OrderStatus @default(CONFIRMED)

  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId          String?

  orderItems      OrderItem[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
